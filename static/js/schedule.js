// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentSchedule = {};
let saturdayEnabled = false;
let cachedSchedule = null;
let cachedHomework = new Map();

// –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–æ–≤
const LESSON_TIMES = [
    '8:30 - 9:15',    // 1 —É—Ä–æ–∫
    '9:30 - 10:15',   // 2 —É—Ä–æ–∫
    '10:30 - 11:15',  // 3 —É—Ä–æ–∫
    '11:30 - 12:15',  // 4 —É—Ä–æ–∫
    '12:30 - 13:15',  // 5 —É—Ä–æ–∫
    '13:30 - 14:15',  // 6 —É—Ä–æ–∫
    '14:30 - 15:15',  // 7 —É—Ä–æ–∫
    '15:30 - 16:15'   // 8 —É—Ä–æ–∫
];

// –ü–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
const DAYS_ORDER = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cookie
function getCookie(name) {
    return document.cookie.split('; ').reduce((r, v) => {
        const parts = v.split('=');
        return parts[0] === name ? decodeURIComponent(parts[1]) : r;
    }, '');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è cookie
function deleteCookie(name) {
    document.cookie = name + '=; Max-Age=0; path=/';
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
function normalizeDocumentId(day, lesson) {
    // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    return `${day}_${lesson.replace(/[\s\/\(\)\.]/g, '_')}`;
}

// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    try {
        const urlParams = new URLSearchParams(window.location.search);
        const isAdmin = urlParams.get('admin') === 'yes' && getCookie('isAdmin') === 'true';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã
        const adminControls = document.getElementById('adminControls');
        const regularControls = document.getElementById('regularControls');
        
        if (isAdmin) {
            adminControls.style.display = 'flex';
            regularControls.style.display = 'none';
        } else {
            adminControls.style.display = 'none';
            regularControls.style.display = 'flex';
        }

    updateCurrentDate();
        await loadSchedule();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞
function checkAdminStatus() {
    const isAdmin = localStorage.getItem('isAdmin') === 'true';
    
    if (isAdmin) {
        const adminControls = document.getElementById('adminControls');
        if (adminControls) {
            adminControls.style.display = 'flex';
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
function updateCurrentDate() {
    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const currentDate = new Date().toLocaleDateString('ru-RU', options);
    document.getElementById('currentDate').textContent = currentDate;
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async function loadSchedule() {
    console.log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    const scheduleContainer = document.querySelector('.schedule-container');
    if (!scheduleContainer) {
        console.error('Container for schedule not found');
        return;
    }
    
    scheduleContainer.innerHTML = '';

    try {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
        if (!cachedSchedule) {
            const response = await fetch('/api/schedule');
            console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
            if (!response.ok) {
                throw new Error('Failed to fetch schedule');
            }
            cachedSchedule = await response.json();
            console.log('–ü–æ–ª—É—á–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:', cachedSchedule);
        }
        currentSchedule = {...cachedSchedule};

        // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—É–±–±–æ—Ç—ã
        const saturdayDoc = await db.collection('settings').doc('saturday').get();
        if (saturdayDoc.exists) {
            const data = saturdayDoc.data();
            saturdayEnabled = data.enabled;
            
            if (saturdayEnabled && data.scheduleFrom) {
                currentSchedule['–°—É–±–±–æ—Ç–∞'] = [...currentSchedule[data.scheduleFrom]];
                
                const saturdayToggle = document.getElementById('saturdayToggle');
                const saturdaySchedule = document.getElementById('saturdaySchedule');
                
                if (saturdayToggle) {
                    saturdayToggle.textContent = '–£–±—Ä–∞—Ç—å —Å—É–±–±–æ—Ç—É';
                }
                if (saturdaySchedule) {
                    saturdaySchedule.style.display = 'block';
                    saturdaySchedule.value = data.scheduleFrom;
                }
            }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        if (cachedHomework.size === 0) {
            const homeworkSnapshot = await db.collection('homework').get();
            homeworkSnapshot.forEach(doc => {
                const data = doc.data();
                cachedHomework.set(`${data.day}_${data.lesson}`, data);
            });
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        DAYS_ORDER.forEach(day => {
            if (currentSchedule[day] && (day !== '–°—É–±–±–æ—Ç–∞' || saturdayEnabled)) {
                const dayCard = createDayCard(day, currentSchedule[day], cachedHomework);
                scheduleContainer.appendChild(dayCard);
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        scheduleContainer.innerHTML = `<div class="error-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ${error.message}</div>`;
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Ä–æ–∫–∞
function createLessonItem(day, lesson, index, homeworkMap) {
    const lessonItem = document.createElement('div');
    lessonItem.className = 'lesson-item';
    
    const homework = homeworkMap.get(`${day}_${lesson}`);
    const isLanguageLesson = lesson.includes('–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π');
    const isSplitLesson = lesson.includes('/');

    let homeworkHTML = '';
    if (isLanguageLesson) {
        homeworkHTML = `
            <div class="language-homework">
                <div class="english-homework${homework?.englishTest ? ' test' : ''}${homework?.englishExam ? ' exam' : ''}">
                    <span class="language-label">üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π</span>
                    ${homework?.englishText ? `
                        <p class="homework-text">${homework.englishText}</p>
                    ` : ''}
                </div>
                <div class="german-homework${homework?.germanTest ? ' test' : ''}${homework?.germanExam ? ' exam' : ''}">
                    <span class="language-label">üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π</span>
                    ${homework?.germanText ? `
                        <p class="homework-text">${homework.germanText}</p>
                    ` : ''}
                </div>
            </div>
        `;
    } else if (isSplitLesson) {
        const [firstPart, secondPart] = lesson.split('/').map(part => part.trim());
        
        homeworkHTML = `
            <div class="language-homework">
                <div class="split-homework${homework?.firstGroupTest ? ' test' : ''}${homework?.firstGroupExam ? ' exam' : ''}">
                    <span class="language-label">üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞</span>
                    ${homework?.firstGroupText ? `
                        <p class="homework-text">${homework.firstGroupText}</p>
                    ` : ''}
                </div>
                <div class="split-homework${homework?.secondGroupTest ? ' test' : ''}${homework?.secondGroupExam ? ' exam' : ''}">
                    <span class="language-label">üõ†Ô∏è –¢—Ä—É–¥—ã</span>
                    ${homework?.secondGroupText ? `
                        <p class="homework-text">${homework.secondGroupText}</p>
                    ` : ''}
                </div>
            </div>
        `;
    } else {
    if (homework) {
        if (homework.isTest) lessonItem.classList.add('test');
        if (homework.isExam) lessonItem.classList.add('exam');
        }
        homeworkHTML = `<p class="homework-text">${homework ? homework.text || '' : ''}</p>`;
    }

    lessonItem.innerHTML = `
        <div class="lesson-header">
            <div class="lesson-info">
                <span class="lesson-number">${index + 1}</span>
                <span class="lesson-name">${lesson}</span>
            </div>
            <span class="lesson-time">${LESSON_TIMES[index]}</span>
        </div>
        ${homeworkHTML}
    `;

    const isAdmin = getCookie('isAdmin') === 'true';
    if (isAdmin) {
        lessonItem.style.cursor = 'pointer';
        lessonItem.addEventListener('click', () => {
            showHomeworkModal(day, lesson, isLanguageLesson);
        });
    }

    return lessonItem;
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–Ω—è
function createDayCard(day, lessons, homeworkMap) {
    const dayCard = document.createElement('div');
    dayCard.className = 'day-card';
    
    const dayHeader = document.createElement('div');
    dayHeader.className = 'day-header';
    dayHeader.innerHTML = `<h2 class="day-name">${day}</h2>`;
    
    const lessonsList = document.createElement('div');
    lessonsList.className = 'lessons-list';
    
    lessons.forEach((lesson, index) => {
        const lessonItem = createLessonItem(day, lesson, index, homeworkMap);
        lessonsList.appendChild(lessonItem);
    });
    
    dayCard.appendChild(dayHeader);
    dayCard.appendChild(lessonsList);
    return dayCard;
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤
function setupCheckboxHandlers() {
    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const homeworkTestCheckbox = document.querySelector('input[name="homeworkTest"]');
    const homeworkExamCheckbox = document.querySelector('input[name="homeworkExam"]');

    if (homeworkTestCheckbox && homeworkExamCheckbox) {
        homeworkTestCheckbox.addEventListener('change', () => {
            if (homeworkTestCheckbox.checked) {
                homeworkExamCheckbox.checked = false;
            }
        });

        homeworkExamCheckbox.addEventListener('change', () => {
            if (homeworkExamCheckbox.checked) {
                homeworkTestCheckbox.checked = false;
            }
        });
    }

    // –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    const englishTestCheckbox = document.querySelector('input[name="englishTest"]');
    const englishExamCheckbox = document.querySelector('input[name="englishExam"]');

    if (englishTestCheckbox && englishExamCheckbox) {
        englishTestCheckbox.addEventListener('change', () => {
            if (englishTestCheckbox.checked) {
                englishExamCheckbox.checked = false;
            }
        });

        englishExamCheckbox.addEventListener('change', () => {
            if (englishExamCheckbox.checked) {
                englishTestCheckbox.checked = false;
            }
        });
    }

    // –î–ª—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞
    const germanTestCheckbox = document.querySelector('input[name="germanTest"]');
    const germanExamCheckbox = document.querySelector('input[name="germanExam"]');

    if (germanTestCheckbox && germanExamCheckbox) {
        germanTestCheckbox.addEventListener('change', () => {
            if (germanTestCheckbox.checked) {
                germanExamCheckbox.checked = false;
            }
        });

        germanExamCheckbox.addEventListener('change', () => {
            if (germanExamCheckbox.checked) {
                germanTestCheckbox.checked = false;
            }
        });
    }

    // –î–ª—è –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã (–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞)
    const firstGroupTestCheckbox = document.querySelector('input[name="firstGroupTest"]');
    const firstGroupExamCheckbox = document.querySelector('input[name="firstGroupExam"]');

    if (firstGroupTestCheckbox && firstGroupExamCheckbox) {
        firstGroupTestCheckbox.addEventListener('change', () => {
            if (firstGroupTestCheckbox.checked) {
                firstGroupExamCheckbox.checked = false;
            }
        });

        firstGroupExamCheckbox.addEventListener('change', () => {
            if (firstGroupExamCheckbox.checked) {
                firstGroupTestCheckbox.checked = false;
            }
        });
    }

    // –î–ª—è –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã (–¢—Ä—É–¥—ã)
    const secondGroupTestCheckbox = document.querySelector('input[name="secondGroupTest"]');
    const secondGroupExamCheckbox = document.querySelector('input[name="secondGroupExam"]');

    if (secondGroupTestCheckbox && secondGroupExamCheckbox) {
        secondGroupTestCheckbox.addEventListener('change', () => {
            if (secondGroupTestCheckbox.checked) {
                secondGroupExamCheckbox.checked = false;
            }
        });

        secondGroupExamCheckbox.addEventListener('change', () => {
            if (secondGroupExamCheckbox.checked) {
                secondGroupTestCheckbox.checked = false;
            }
        });
    }
}

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', setupCheckboxHandlers);

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
function showHomeworkModal(day, lesson, isLanguageLesson) {
    const modal = document.getElementById('homeworkModal');
    const selectedLesson = document.getElementById('selectedLesson');
    const homeworkText = document.getElementById('homeworkText');
    const languageSection = document.getElementById('languageSection');
    const splitSection = document.getElementById('splitSection');
    const homeworkMarks = document.querySelector('.homework-marks');

    const isSplitLesson = lesson.includes('/');

    selectedLesson.textContent = `${day}: ${lesson}`;
    modal.dataset.day = day;
    modal.dataset.lesson = lesson;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã
    document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
        checkbox.checked = false;
    });

    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
    document.querySelectorAll('textarea').forEach(textarea => {
        textarea.value = '';
    });

    if (isLanguageLesson) {
        homeworkText.style.display = 'none';
        homeworkMarks.style.display = 'none';
        languageSection.style.display = 'block';
        splitSection.style.display = 'none';
    } else if (isSplitLesson) {
        homeworkText.style.display = 'none';
        homeworkMarks.style.display = 'none';
        languageSection.style.display = 'none';
        splitSection.style.display = 'block';
    } else {
        homeworkText.style.display = 'block';
        homeworkMarks.style.display = 'block';
        languageSection.style.display = 'none';
        splitSection.style.display = 'none';
    }

    loadExistingHomework(day, lesson, isLanguageLesson, isSplitLesson);
    setupCheckboxHandlers();
    modal.style.display = 'block';
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
async function loadExistingHomework(day, lesson, isLanguageLesson, isSplitLesson) {
    try {
        const docId = normalizeDocumentId(day, lesson);
        const homeworkDoc = await db.collection('homework')
            .doc(docId)
            .get();

        if (homeworkDoc.exists) {
            const data = homeworkDoc.data();
            if (isLanguageLesson) {
                document.getElementById('englishText').value = data.englishText || '';
                document.getElementById('germanText').value = data.germanText || '';
                document.querySelector('input[name="englishTest"]').checked = data.englishTest || false;
                document.querySelector('input[name="englishExam"]').checked = data.englishExam || false;
                document.querySelector('input[name="germanTest"]').checked = data.germanTest || false;
                document.querySelector('input[name="germanExam"]').checked = data.germanExam || false;
            } else if (isSplitLesson) {
                document.getElementById('firstGroupText').value = data.firstGroupText || '';
                document.getElementById('secondGroupText').value = data.secondGroupText || '';
                document.querySelector('input[name="firstGroupTest"]').checked = data.firstGroupTest || false;
                document.querySelector('input[name="firstGroupExam"]').checked = data.firstGroupExam || false;
                document.querySelector('input[name="secondGroupTest"]').checked = data.secondGroupTest || false;
                document.querySelector('input[name="secondGroupExam"]').checked = data.secondGroupExam || false;
            } else {
        document.getElementById('homeworkText').value = data.text || '';
                document.querySelector('input[name="homeworkTest"]').checked = data.isTest || false;
                document.querySelector('input[name="homeworkExam"]').checked = data.isExam || false;
            }
        } else {
            // –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª–µ–π
            if (isLanguageLesson) {
                document.getElementById('englishText').value = '';
                document.getElementById('germanText').value = '';
                document.querySelector('input[name="englishTest"]').checked = false;
                document.querySelector('input[name="englishExam"]').checked = false;
                document.querySelector('input[name="germanTest"]').checked = false;
                document.querySelector('input[name="germanExam"]').checked = false;
            } else if (isSplitLesson) {
                document.getElementById('firstGroupText').value = '';
                document.getElementById('secondGroupText').value = '';
                document.querySelector('input[name="firstGroupTest"]').checked = false;
                document.querySelector('input[name="firstGroupExam"]').checked = false;
                document.querySelector('input[name="secondGroupTest"]').checked = false;
                document.querySelector('input[name="secondGroupExam"]').checked = false;
    } else {
        document.getElementById('homeworkText').value = '';
                document.querySelector('input[name="homeworkTest"]').checked = false;
                document.querySelector('input[name="homeworkExam"]').checked = false;
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', error);
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
async function saveHomework() {
    try {
        const modal = document.getElementById('homeworkModal');
        const day = modal.dataset.day;
        const lesson = modal.dataset.lesson;
        const docId = normalizeDocumentId(day, lesson);
        
        const isLanguageLesson = lesson.includes('–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π');
        const isSplitLesson = lesson.includes('/');

        let homeworkData = {
            day,
            lesson,
            updatedAt: new Date().toISOString()
        };

        if (isLanguageLesson) {
            // –î–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤
            homeworkData = {
                ...homeworkData,
                englishText: document.getElementById('englishText')?.value || '',
                germanText: document.getElementById('germanText')?.value || '',
                englishTest: document.querySelector('input[name="englishTest"]')?.checked || false,
                englishExam: document.querySelector('input[name="englishExam"]')?.checked || false,
                germanTest: document.querySelector('input[name="germanTest"]')?.checked || false,
                germanExam: document.querySelector('input[name="germanExam"]')?.checked || false
            };
        } else if (isSplitLesson) {
            // –î–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ (–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞/–¢—Ä—É–¥—ã)
            homeworkData = {
                ...homeworkData,
                firstGroupText: document.getElementById('firstGroupText')?.value || '',
                secondGroupText: document.getElementById('secondGroupText')?.value || '',
                firstGroupTest: document.querySelector('input[name="firstGroupTest"]')?.checked || false,
                firstGroupExam: document.querySelector('input[name="firstGroupExam"]')?.checked || false,
                secondGroupTest: document.querySelector('input[name="secondGroupTest"]')?.checked || false,
                secondGroupExam: document.querySelector('input[name="secondGroupExam"]')?.checked || false
            };
        } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            homeworkData = {
                ...homeworkData,
                text: document.getElementById('homeworkText')?.value || '',
                isTest: document.querySelector('input[name="homeworkTest"]')?.checked || false,
                isExam: document.querySelector('input[name="homeworkExam"]')?.checked || false
            };
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const docRef = db.collection('homework').doc(docId);
        await docRef.set(homeworkData);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
        cachedHomework.set(`${day}_${lesson}`, homeworkData);
        await loadSchedule();
        closeModal();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–ΩÔøΩÔøΩ–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    document.getElementById('homeworkModal').style.display = 'none';
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—É–±–±–æ—Ç—ã
async function toggleSaturday() {
    const toggleBtn = document.getElementById('saturdayToggle');
    const scheduleSelect = document.getElementById('saturdaySchedule');
    
    saturdayEnabled = !saturdayEnabled;
    
    if (saturdayEnabled) {
        toggleBtn.textContent = '–£–±—Ä–∞—Ç—å —Å—É–±–±–æ—Ç—É';
        scheduleSelect.style.display = 'block';
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        const selectedDay = scheduleSelect.value;
        currentSchedule['–°—É–±–±–æ—Ç–∞'] = [...currentSchedule[selectedDay]];
    } else {
        toggleBtn.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Å—É–±–±–æ—Ç—É';
        scheduleSelect.style.display = 'none';
        delete currentSchedule['–°—É–±–±–æ—Ç–∞'];
    }
    
    try {
        await db.collection('settings').doc('saturday').set({
            enabled: saturdayEnabled,
            scheduleFrom: saturdayEnabled ? scheduleSelect.value : null
        });

        // –û—á–∏—â–∞–µ–º –∫—ç—à –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        cachedSchedule = null;
        cachedHomework.clear();
        await loadSchedule();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—É–±–±–æ—Ç—ã:', error);
    }
}

// –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
function logout() {
    deleteCookie('isAdmin');
    cachedSchedule = null;
    cachedHomework.clear();
    window.location.href = '/';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.onclick = function(event) {
    const modal = document.getElementById('homeworkModal');
    if (event.target == modal) {
        closeModal();
    }
}

// –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –¥–ª—è —Å—É–±–±–æ—Ç—ã
document.getElementById('saturdaySchedule')?.addEventListener('change', async (e) => {
    if (saturdayEnabled) {
        currentSchedule['–°—É–±–±–æ—Ç–∞'] = [...currentSchedule[e.target.value]];
        await db.collection('settings').doc('saturday').set({
            enabled: true,
            scheduleFrom: e.target.value
        });
        loadSchedule();
    }
});
 